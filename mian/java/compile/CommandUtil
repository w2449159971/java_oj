package compile;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

//借助这个类，让Java代码能够去执行一个具体的命令
//例如javac Test。java
public class CommandUtil {
    //cmd表示要执行的命令
    //stdoutFile表示标准输出结果重定向到那个文件，如果为null表示不需要重定向
    //stderrFile表示标准错误结果重定向到哪个文件中
    public static int run(String cmd, String stdoutFile,String sterrFile) throws IOException, InterruptedException {
        //1.获取Runtime对象
        Runtime runtime = Runtime.getRuntime();
        //2.通过Runtime对象中的exec方法来执行一个指令
        //相当于在命令行输入了cmd命令并执行
        Process process = runtime.exec(cmd);
        //3.针对标准输出进行重定向
        if(stdoutFile != null){
            //进程中的标准输出中的结果就可以通过这个InputStream获取到
            InputStream stdoutFrom = process.getInputStream();
            OutputStream stdoutTo = new FileOutputStream(stdoutFile);
            int ch = -1;
            //一个字节字节得读取
            while ((ch = stdoutFrom.read())!= -1){
                stdoutTo.write(ch);
            }
            stdoutFrom.close();
            stdoutTo.close();
        }
        //4.针对标准错误也进行重定向
        if(sterrFile != null){
            InputStream stderrFrom = process.getErrorStream();
            OutputStream stderrTo = new FileOutputStream(sterrFile);
            int ch = -1;
            //一个字节字节得读取
            while ((ch = stderrFrom.read())!= -1){
                stderrTo.write(ch);
            }
            stderrFrom.close();
            stderrTo.close();
        }
        //5.为了确保子进程先执行完，需要加上进程等待。
        int exitCode = process.waitFor();
        return exitCode;
    }

    public static void main(String[] args) throws IOException, InterruptedException {
        run("javac","d:/stdout.txt","d:/stderr.txt");
    }
}
